var documenterSearchIndex = {"docs":
[{"location":"lib/public/#Public-Documentation","page":"Public Documentation","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/","page":"Public Documentation","title":"Public Documentation","text":"Documentation for AcousticWaveCPML.jl's public interface.","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public Documentation","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/","page":"Public Documentation","title":"Public Documentation","text":"Modules = [\n    AcousticWaveCPML,\n    AcousticWaveCPML.Acoustic1D,\n    AcousticWaveCPML.Acoustic2D,\n    AcousticWaveCPML.Acoustic2D_Threads,\n    AcousticWaveCPML.Acoustic2D_CUDA,\n    AcousticWaveCPML.Acoustic2Dmulti_Threads,\n    AcousticWaveCPML.Acoustic2Dmulti_CUDA,\n    AcousticWaveCPML.Acoustic3D,\n    AcousticWaveCPML.Acoustic3D_Threads,\n    AcousticWaveCPML.Acoustic3D_CUDA,\n    AcousticWaveCPML.Acoustic3Dmulti_Threads,\n    AcousticWaveCPML.Acoustic3Dmulti_CUDA]\nPrivate = false\nOrder   = [:module, :type, :function]","category":"page"},{"location":"lib/public/#AcousticWaveCPML.Receivers","page":"Public Documentation","title":"AcousticWaveCPML.Receivers","text":"Type representing a multi-receiver configuration for a wave propagation shot.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#AcousticWaveCPML.Receivers-Tuple{Matrix{<:Real}}","page":"Public Documentation","title":"AcousticWaveCPML.Receivers","text":"Receivers(positions::Matrix{<:Real})\n\nCreate a single shot wave propagation receivers configuration from receivers positions.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Sources","page":"Public Documentation","title":"AcousticWaveCPML.Sources","text":"Type representing a multi-source configuration for a wave propagation shot.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#AcousticWaveCPML.Sources-Tuple{Matrix{<:Real}, Vector{<:Real}, Vector{<:Function}, Real}","page":"Public Documentation","title":"AcousticWaveCPML.Sources","text":"Sources(\n    positions::Matrix{<:Real},\n    t0s::Vector{<:Real},\n    srctfs::Vector{<:Function},\n    freqdomain::Real\n)\n\nCreate a single shot wave propagation source configuration from source positions, time-functions and a frequency domain.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.rickersource1D-Tuple{Real, Real, Real}","page":"Public Documentation","title":"AcousticWaveCPML.rickersource1D","text":"rickersource1D(t::Real, t0::Real, f0::Real)\n\nRicker source time function for current time t, activation timet0and dominating frequencyf0`.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic1D.solve1D-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic1D.solve1D","text":"solve1D(\n    lx::Real,\n    lt::Real,\n    vel::Vector{<:Real},\n    srcs::Sources,\n    recs::Receivers;\n    halo::Integer = 20,\n    rcoef::Real = 0.0001,\n    ppw::Real = 10.0,\n    do_bench::Bool = false,\n    do_vis::Bool = false,\n    nvis::Integer = 5,\n    gif_name::String = \"acoustic1D\",\n    plims::Vector{<:Real} = [-1.0, 1.0]\n)\n\nSolve 1D acoustic wave equation on a model with length lx [m], for final time lt [sec] with the velocity model vel [m/s]. The size of vel implicitly specifies the number of grid points to use for the simulation. \n\nSources and receivers are specified by srcs and recs.\n\nReturn the final time pressure field as a vector and populate the receivers seismograms with the recorded traces.\n\nArguments\n\nhalo::Integer = 20: the number of CPML layers.\nrcoef::Real = 0.0001: the reflection coeffiecient for CPML layers.\nppw::Real = 10.0: minimum number of points per wavelength admissible.\ndo_bench::Bool = false: do benchmark instead of computation.\ndo_vis::Bool = false: enables plotting.\nnvis::Integer = 5: plotting time step frequency.\ngif_name::String = \"acoustic1D\": name of animation plot.\nplims::Vector{<:Real} = [-1.0, 1.0]: limits for pressure values in plot.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic2D.solve2D-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic2D.solve2D","text":"solve2D(     lx::Real,     ly::Real,     lt::Real,     vel::Matrix{<:Real},     srcs::Sources,     recs::Receivers;     halo::Integer = 20,     rcoef::Real = 0.0001,     ppw::Real = 10.0,     freetop::Bool = true,     dobench::Bool = false,     dovis::Bool = false,     nvis::Integer = 5,     gif_name::String = \"acoustic2D\",     plims::Vector{<:Real} = [-1.0, 1.0],     threshold::Real = 0.01 )\n\nSolve 2D acoustic wave equation on a model with size lxxly [m], for final time lt [sec] with the velocity model vel [m/s]. The size of vel implicitly specifies the number of grid points to use for the simulation. \n\nSources and receivers are specified by srcs and recs.\n\nReturn the final time pressure field as a vector and populate the receivers seismograms with the recorded traces.\n\nArguments\n\nhalo::Integer = 20: the number of CPML layers.\nrcoef::Real = 0.0001: the reflection coeffiecient for CPML layers.\nppw::Real = 10.0: minimum number of points per wavelength admissible.\nfreetop::Bool = true: enables free top boundary conditions.\ndo_bench::Bool = false: do benchmark instead of computation.\ndo_vis::Bool = false: enables plotting.\nnvis::Integer = 5: plotting time step frequency.\ngif_name::String = \"acoustic1D\": name of animation plot.\nplims::Vector{<:Real} = [-1.0, 1.0]: limits for pressure values in plot.\nthreshold::Real = 0.01: percentage of plims to use as threshold for plots.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic2D_CUDA.solve2D-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic2D_CUDA.solve2D","text":"solve2D(     lx::Real,     ly::Real,     lt::Real,     vel::Matrix{<:Real},     srcs::Sources,     recs::Receivers;     halo::Integer = 20,     rcoef::Real = 0.0001,     ppw::Real = 10.0,     freetop::Bool = true,     dobench::Bool = false,     dovis::Bool = false,     nvis::Integer = 5,     gif_name::String = \"acoustic2D\",     plims::Vector{<:Real} = [-1.0, 1.0],     threshold::Real = 0.01 )\n\nSolve 2D acoustic wave equation on a model with size lxxly [m], for final time lt [sec] with the velocity model vel [m/s]. The size of vel implicitly specifies the number of grid points to use for the simulation. \n\nSources and receivers are specified by srcs and recs.\n\nReturn the final time pressure field as a vector and populate the receivers seismograms with the recorded traces.\n\nArguments\n\nhalo::Integer = 20: the number of CPML layers.\nrcoef::Real = 0.0001: the reflection coeffiecient for CPML layers.\nppw::Real = 10.0: minimum number of points per wavelength admissible.\nfreetop::Bool = true: enables free top boundary conditions.\ndo_bench::Bool = false: do benchmark instead of computation.\ndo_vis::Bool = false: enables plotting.\nnvis::Integer = 5: plotting time step frequency.\ngif_name::String = \"acoustic1D\": name of animation plot.\nplims::Vector{<:Real} = [-1.0, 1.0]: limits for pressure values in plot.\nthreshold::Real = 0.01: percentage of plims to use as threshold for plots.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic2Dmulti_Threads.solve2D_multi-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic2Dmulti_Threads.solve2D_multi","text":"solve2Dmulti(     lx::Real,     ly::Real,     lt::Real,     nx::Integer,     ny::Integer,     velfunc::Function,     srcs::Sources,     recs::Receivers;     halo::Integer = 20,     rcoef::Real = 0.0001,     ppw::Real = 10.0,     freetop::Bool = true,     dovis::Bool = false,     nvis::Integer = 5,     gifname::String = \"acoustic2DmultixPU\",     plims::Vector{<:Real} = [-1, 1],     threshold::Real = 0.01,     initMPI::Bool = true )\n\nSolve 2D acoustic wave equation on multiple MPI processes on a model with size lxxly [m], for final time lt [sec] with the velocity model vel_func [m/s]. The LOCAL number of grid points to use for the simulation (for each MPI processes) is specified by nx and ny. The velocity model vel_func must be a function accepting two arguments, the x and y coordinates of a point in meters, and returning the velocity value at that point.\n\nSources and receivers are specified by srcs and recs.\n\nReturn the LOCAL final time pressure field as a vector and populate the receivers seismograms with the LOCAL recorded traces. This means that the each MPI process returns only its piece of final pressure field and only records traces of receivers inside of its local domain.\n\nArguments\n\nhalo::Integer = 20: the number of CPML layers.\nrcoef::Real = 0.0001: the reflection coeffiecient for CPML layers.\nppw::Real = 10.0: minimum number of points per wavelength admissible.\nfreetop::Bool = true: enables free top boundary conditions.\ndo_vis::Bool = false: enables plotting.\nnvis::Integer = 5: plotting time step frequency.\ngif_name::String = \"acoustic1D\": name of animation plot.\nplims::Vector{<:Real} = [-1.0, 1.0]: limits for pressure values in plot.\nthreshold::Real = 0.01: percentage of plims to use as threshold for plots.\ninit_MPI::Bool = true: initialize MPI with ImplicitGlobalGrid.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic2Dmulti_CUDA.solve2D_multi-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic2Dmulti_CUDA.solve2D_multi","text":"solve2Dmulti(     lx::Real,     ly::Real,     lt::Real,     nx::Integer,     ny::Integer,     velfunc::Function,     srcs::Sources,     recs::Receivers;     halo::Integer = 20,     rcoef::Real = 0.0001,     ppw::Real = 10.0,     freetop::Bool = true,     dovis::Bool = false,     nvis::Integer = 5,     gifname::String = \"acoustic2DmultixPU\",     plims::Vector{<:Real} = [-1, 1],     threshold::Real = 0.01,     initMPI::Bool = true )\n\nSolve 2D acoustic wave equation on multiple MPI processes on a model with size lxxly [m], for final time lt [sec] with the velocity model vel_func [m/s]. The LOCAL number of grid points to use for the simulation (for each MPI processes) is specified by nx and ny. The velocity model vel_func must be a function accepting two arguments, the x and y coordinates of a point in meters, and returning the velocity value at that point.\n\nSources and receivers are specified by srcs and recs.\n\nReturn the LOCAL final time pressure field as a vector and populate the receivers seismograms with the LOCAL recorded traces. This means that the each MPI process returns only its piece of final pressure field and only records traces of receivers inside of its local domain.\n\nArguments\n\nhalo::Integer = 20: the number of CPML layers.\nrcoef::Real = 0.0001: the reflection coeffiecient for CPML layers.\nppw::Real = 10.0: minimum number of points per wavelength admissible.\nfreetop::Bool = true: enables free top boundary conditions.\ndo_vis::Bool = false: enables plotting.\nnvis::Integer = 5: plotting time step frequency.\ngif_name::String = \"acoustic1D\": name of animation plot.\nplims::Vector{<:Real} = [-1.0, 1.0]: limits for pressure values in plot.\nthreshold::Real = 0.01: percentage of plims to use as threshold for plots\ninit_MPI::Bool = true: initialize MPI with ImplicitGlobalGrid.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic3D.solve3D-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic3D.solve3D","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic3D_Threads.solve3D-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic3D_Threads.solve3D","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic3D_CUDA.solve3D-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic3D_CUDA.solve3D","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic3Dmulti_Threads.solve3D_multi-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic3Dmulti_Threads.solve3D_multi","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#AcousticWaveCPML.Acoustic3Dmulti_CUDA.solve3D_multi-Tuple{}","page":"Public Documentation","title":"AcousticWaveCPML.Acoustic3Dmulti_CUDA.solve3D_multi","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"#AcousticWaveCPML.jl","page":"AcousticWaveCPML.jl","title":"AcousticWaveCPML.jl","text":"","category":"section"},{"location":"","page":"AcousticWaveCPML.jl","title":"AcousticWaveCPML.jl","text":"A Julia package for solving acoustic wave propagation in 2D and 3D on multi-xPUs using CPML boundary conditions.","category":"page"},{"location":"#Package-Features","page":"AcousticWaveCPML.jl","title":"Package Features","text":"","category":"section"},{"location":"","page":"AcousticWaveCPML.jl","title":"AcousticWaveCPML.jl","text":"1D, 2D and 3D acoustic wave equation solvers with CPML boundary conditions\n2D and 3D xPUs (i.e. that can run on both CPUs and GPUs) implemenations (using ParallelStencil.jl)\n2D and 3D multi-xPUs implementations (using ParallelStencil.jl and ImplicitGlobalGrid.jl as well as MPI)","category":"page"},{"location":"","page":"AcousticWaveCPML.jl","title":"AcousticWaveCPML.jl","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#GitHub-repository","page":"AcousticWaveCPML.jl","title":"GitHub repository","text":"","category":"section"},{"location":"","page":"AcousticWaveCPML.jl","title":"AcousticWaveCPML.jl","text":"You will find most of the scientific info/results here.","category":"page"},{"location":"#main-index","page":"AcousticWaveCPML.jl","title":"Index","text":"","category":"section"},{"location":"","page":"AcousticWaveCPML.jl","title":"AcousticWaveCPML.jl","text":"Pages = [\"lib/public.md\"]","category":"page"}]
}
